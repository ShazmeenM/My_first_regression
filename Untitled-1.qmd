---
title: "Untitled"
format: html
---

```{python}
# # importing required libararies and dataset
import numpy as np
import pandas as pd
housing_mean_sale_price = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="mean_sale_price")

# Function testing the above assumption. It will return true if the assumptions holds and false otherwise.
test_neg = ((housing_mean_sale_price['Detached' or 'Semi-detached' or 'Terraced' or 'Flats']) > 0).any()
print (test_neg)
print("Status description: A true means there is no negative values (Pass). A false means there is a negative value (Fail).")

# Print location of failure in data
housing_mean_sale_price[((housing_mean_sale_price['Flats']) < 0)]
```


housing_mean_sale_price[(housing_mean_sale_price['Detached'] or housing_mean_sale_price['Semi-detached'] or housing_mean_sale_price['Terraced'] or housing_mean_sale_price['Flats']) < 0].any()

housing_mean_sale_price[(housing_mean_sale_price['All_dwelling_types'] or housing_sale_counts['Detached'] or housing_sale_counts['Semi-detached'] or housing_sale_counts['Terraced'] or housing_sale_counts['Flats']) < 0].any()

(housing_mean_sale_price < 0).any().any()

data = data[(data['col1']>0) & (data['valuecol2']>0) & (data['valuecol3']>0)]

for cols in housing_mean_sale_price()[1:]:
    data = housing_mean_sale_price.ix[housing_mean_sale_price[cols] < 0]

housing_mean_sale_price[(housing_mean_sale_price['Detached' or 'Semi-detached' or 'Terraced' or 'Flats'] < 0)]
housing_mean_sale_price[(housing_mean_sale_price['Detached' or 'Semi-detached' or 'Terraced' or 'Flats'] < 0)].any()

test_neg = ((housing_mean_sale_price['Detached' or 'Semi-detached' or 'Terraced' or 'Flats']) < 0).any()
print ("Status:")
print (test_neg)
print("Status description: A true means there is a negative values (Fail). A false means there is no negative value (Pass).")

prev_count = 0
for ... :
    count = ...
    if prev_count < count:
        #do stuff
    prev_count = count

#Grouping and perform count over each group
dept_emp_num =  housing_sale_price.groupby('LA_Name')['Year'].count()

df_grouped = housing_sale_price.groupby('LA_Name')
df_grouped.get_group('LA_Name')

df_grouped.get_group('LA_Name')['Detached'].mean()

# Separate the rows of the DataFrame into groups which have the same salary
groups = housing_sale_price.groupby('LA_Name', 'Year')

# Filter out the groups whose average salary is less than 100000
groups.filter(lambda x: x['Detached'].mean() > 100000)

print(housing_sale_price.iloc[-1])
print(housing_sale_price.iloc[-2])

# Display all the values of the last column down the rows
df.iloc[:, -1]

groups.filter(lambda x: x['Detached'] < groups.iloc[-1, :])

print(groups.iloc[-2, :] > groups.iloc[-1, :])
groups.iloc[20,3]


group = housing_sale_price.groupby(['LA_Name', 'Year'])
group.groups
housing_sale_price.iloc[groups[1]]

group1=housing_sale_price.groupby(by=['LA_Name','Year'])
group1.groups
housing_sale_price.iloc[groups[1]]

# made sense
print(housing_sale_price.iloc[-2, :] > housing_sale_price.iloc[-1, :])


print(housing_sale_price.iloc[-2, :] > housing_sale_price.iloc[-1, :])

grp = housing_sale_price.groupby('Year')
for Year, group in grp:
    print(Year)
    print(group)
    print()

# filtering data using
# filter data
grp.filter(lambda x: len(x) >= 2003) 

import numpy as np
import pandas as pd
housing_sale_price = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="median_sale_price")
group = housing_sale_price.groupby('Year')
group.first()

grp = housing_sale_price.groupby('Year')
for Year, group in grp:
    print(Year)
    print(group)
    print(group.iloc[-2, 5] > group.iloc[-1, 5])

# filtering data using
# filter data
grp.filter(lambda x: Year >= 2003) 

# didnt work
def flag(name,num):
    for row in group:
        if row[-2] > row[-1]:
            return 'yes'
        else:
            return 'no'
    
print flag(name,num())

# didnt work
for (columnName, columnData) in group.iteritems():
    print('Column Name : ', columnName)
    print('Column Contents : ', columnData.values)


print(group)
group.first()

group.ngroups
group.groups

# this worked
group = housing_sale_price.groupby(['LA_Name'])['Detached'].count()

# Convert groupby object to DataFrame 
grouped_df = group.reset_index()
print(grouped_df)
print(type(grouped_df))

# function

def test(group):
    return "Increasing." if all(group[i] < group[i + 1] for i in range(len(group) - 1)) else \
        "Decreasing." if all(group[i + 1] < group[i] for i in range(len(group) - 1)) else \
        "Not a monotonic sequence!"
print(test(group))



group = housing_sale_price.groupby(['LA_Name', 'Year'])['Detached'].first()

# Convert groupby object to DataFrame 
grouped_df = group.reset_index()
print(grouped_df)
# Using Series.values.tolist()
col_list = grouped_df["Detached"].values.tolist()
print(col_list)

def test(col_list):
    return "Increasing." if all(col_list[i] < col_list[i + 1] for i in range(len(col_list) - 1)) else \
        "Decreasing." if all(col_list[i + 1] < col_list[i] for i in range(len(col_list) - 1)) else \
        "Not a monotonic sequence!"
print(test(col_list))

# creating a new column flagging increase/decrease
housing_sale_price['new'] = housing_sale_price.groupby(['LA_Name'])['Detached'].transform(lambda x : \
                      np.where(x.diff()>0,'incresase',
                      np.where(x.diff()<0,'decrease','--')))

print(housing_sale_price)

housing_sale_price['new'] = housing_sale_price.groupby(['LA_Name', 'Year'])['Detached'].transform(lambda x : \
                      np.where(x.diff()>0,'incresase',
                      np.where(x.diff()<0,'decrease','--')))

print(housing_sale_price)

# finding increase/decrese in a column of dataframe by using np.where with groupby
housing_sale_price['new'] = housing_sale_price.groupby(['LA_Name'])['Year', 'Detached'].transform(lambda x : \
                      np.where(x.diff()>0,'incresase',
                      np.where(x.diff()<0,'decrease','--')))

print(housing_sale_price)