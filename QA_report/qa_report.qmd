---
title: "Quality Assurance Report"
author: "Shazmeen Maroof"
date: now
execute:
  echo: false
format:
  html:
    embed-resources: true
    toc: true
    toc-title: "Contents"
    toc-location: left
    html-math-method: katex
---

```{python}
# Importing libraries and reading data
import numpy as np
import pandas as pd
from IPython.display import display, Markdown

housing_introduction = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="introduction")
housing_sale_counts = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="sale_counts")
housing_median_sale_price = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="median_sale_price")
housing_sale_price_regions = pd.read_excel("D:\\git_demo\\Data/Housing_data.xlsx", sheet_name="median_sale_price_regions")


# Read total number of rows and columns in the data
nrow, ncol = housing_sale_counts.shape
```

## Introduction

```{python}
display(Markdown(f""" The title of the dataset is {housing_introduction.at[0, 'Column_b']}. {housing_introduction.at[1, 'Column_b']}. The data has been taken from {housing_introduction.at[2, 'Column_b']}. The data is published {housing_introduction.at[3, 'Column_b']}. The data covers {housing_introduction.at[4, 'Column_b']}. The data limitations are {housing_introduction.at[5, 'Column_b']}. The data is published {housing_introduction.at[7, 'Column_b']} confidence intervals. {housing_introduction.at[8, 'Column_b']}. There are {nrow} rows and {ncol} columns in the dataset. """))
``` 


## Data quality tests   

## Test 1  
Description: Checks if sum of variables equals total.  
Data specific description: Checks if sum of detahced, semi-detached, terraced houses and flats equals all dwelling types

```{python}
def test_sum_variables():
    if all(housing_sale_counts[(housing_sale_counts['All_dwelling_types']) != (housing_sale_counts['Detached'] + housing_sale_counts['Semi-detached'] + housing_sale_counts['Terraced'] + housing_sale_counts['Flats'])]):
        print("Status: Fail. A fail means sum of varaibles do not equal total.")
        return False
    else:
        print("Status: Pass. A pass means sum of variables equals total.")
        return True
print (test_sum_variables())

housing_sale_counts[(housing_sale_counts['All_dwelling_types']) != (housing_sale_counts['Detached'] + housing_sale_counts['Semi-detached'] + housing_sale_counts['Terraced'] + housing_sale_counts['Flats'])]

```

## Test 2  

Description: Checks if values of a variable are always less than other.  
Data specific description: Checks if the number of flats are lesser than the number of semi-detached houses.

```{python}
def test_val_variable():
    if all(housing_sale_counts[(housing_sale_counts['Semi-detached']) <(housing_sale_counts['Flats'])]): 
        print("Status: Fail. A fail means number of flats are not less than number of semi-detached houses in atleast one LA.")
        return False
    else:
        print("Status: Pass. A pass means number of flats are less than number of semi-detached houses in all LAs")
        return True
print (test_val_variable())

housing_sale_counts[(housing_sale_counts['Semi-detached']) < (housing_sale_counts['Flats'])]
```

## Test 3  

Description: Checks if any of the variables in the dataset has a negative value.
Data specific description: Checks if the data on sales of detahced, semi-detached, terraced and flats has a negative value. 
```{python}
# convert an individual column in the dataframe into a list
All_dwelling_types = housing_median_sale_price['All_dwelling_types'].values.tolist()

# function testing negative values
def find_negatives(All_dwelling_types):
  for num in All_dwelling_types:
    if num < 0:
      print(num, end=" ")
      return False
      print("Status: Fail. A fail means there is a negative value.")
    else:
      return True
      print("Status: Pass. A pass means there is no negative value.")
      
# print result
print(find_negatives(All_dwelling_types))    

# print location of failures
housing_median_sale_price[((housing_median_sale_price['All_dwelling_types']) < 0)]

# or code testing negative values
test_neg = ((housing_sale_counts['Detached' or 'Semi-detached' or 'Terraced' or 'Flats']) < 0).any()
print ("Status:")
print (test_neg)
print("Status description: A true means there is a negative values (Fail). A false means there is no negative value (Pass).")

# print location of failures
housing_sale_counts[((housing_sale_counts['Flats']) < 0)]
```

## Test 4

Description: Checks if any of the variables in the dataset has a missing value.
Data specific description: Checks if the data on prices of detahced, semi-detached, terraced and flats has a missing value. 
```{python}
display(Markdown(f"""Status: There are {housing_sale_counts.isnull().values.sum()} missing values in the dataset.  """))

# print location of failures
housing_sale_counts[housing_sale_counts['Detached'].isnull()]
``` 

## Test 5
Description: Checks if any values of the variables in the dataset contains a letter.  
Data specific description: Checks if the data on sales of detahced, semi-detached, terraced and flats has a non-numeric value.  
```{python}
# convert an individual column in the dataframe into a list
All_dwelling_types = housing_median_sale_price['All_dwelling_types'].values.tolist()

# conditional statement to check if the variable is a number
if type(All_dwelling_types) == int or float:
    print("Status: Pass. A pass means the variable is a number.")
else:
    print("Status: Fail. A fail means the variable is not a number")
```

## Test 6  
Description: Checks if a certain value appears specific times in data.  
Data specific description: Checks if a local authority name appears only 5 times in the dataset.  

```{python}
group = housing_median_sale_price.groupby('LA_Name')
pd.DataFrame(group.size().reset_index())

# can also try below

group = housing_median_sale_price.groupby(['LA_Name'])['Detached'].count()

# Convert groupby object to DataFrame 
grouped_df = group.reset_index()
if grouped_df['Detached'].any() == 5:
    print("Status: Pass. A pass means the variable is a number.")
else:
    print("Status: Fail. A fail means the variable is not a number")
#print(grouped_df)
```


## Test 7  
Description: Checks if the value of a variable is increasing over time. 
Data specific description: Total sale price of each dwelling type in time 't' should be less than time 't+1'.  

Status: 
```{python}
# grouping rows (LA_Name) by columns (Year)
group = housing_median_sale_price.groupby(['LA_Name', 'Year'], as_index=False)[['Detached', 'Semi-detached', 'Terraced', 'Flats']].first()

# computing row differences across groups
group['Detached_trend'] = group['Detached'].diff()
group['Semi-detached_trend'] = group['Semi-detached'].diff()
group['Terraced_trend'] = group['Terraced'].diff()
group['Flats_trend'] = group['Flats'].diff()

# Using drop() to delete rows in which Year < 2001
group.drop(group[group['Year'] < 2001].index, inplace = True)

# printing location of failures
house_price_trend_neg = group[(group['Detached_trend']<0) | (group['Semi-detached_trend']<0) | (group['Terraced_trend']<0) | (group['Flats_trend']<0)]
print(house_price_trend_neg)
```


check if a series has the same data type, like number, letters, date etc
## Data characteristics' tests

Test 1: Plot trend of sales and prices by dwelling types

Test 2: What does the data distribution look like? 

Test 3: Are there any outliers?

Test 4: Is there any correlation between tpe of dwellings and house price?
